import com.jonasgerdes.stoppelmap.data.map.MapEntityType;
import kotlin.Boolean;

CREATE TABLE map_entity (
    slug TEXT NOT NULL PRIMARY KEY,
    name TEXT,
    type TEXT AS MapEntityType NOT NULL,
    sub_type TEXT,
    descriptionKey TEXT,
    operator TEXT,
    priority INTEGER NOT NULL,
    isSearchable Integer AS Boolean NOT NULL,

    FOREIGN KEY(sub_type) REFERENCES sub_type(slug),
    FOREIGN KEY(descriptionKey) REFERENCES localized_string(key),
    FOREIGN KEY(operator) REFERENCES operator(slug),
    FOREIGN KEY(slug) REFERENCES fee(referenceSlug),
    FOREIGN KEY(slug) REFERENCES website(referenceSlug),
    FOREIGN KEY(slug) REFERENCES location(referenceSlug),
    FOREIGN KEY(slug) REFERENCES bounding_box(referenceSlug)
);

insert:
INSERT INTO map_entity(slug, name, type, sub_type, descriptionKey, priority, isSearchable)
VALUES ?;

clear:
DELETE FROM map_entity;

searchByName:
SELECT slug FROM map_entity WHERE name LIKE ( '%' || :name || '%') AND isSearchable = 1;

searchType:
SELECT slug FROM map_entity WHERE type = :type AND isSearchable = 1;

getSummaryBySlug:
SELECT slug, name, type, sub_type
FROM map_entity
WHERE slug IN :slugs;

getFullBySlug:
SELECT map_entity.slug, map_entity.name, map_entity.type, map_entity.sub_type,
localized_string.string AS description,
bounding_box.*, location.*
FROM map_entity
JOIN bounding_box ON map_entity.slug = bounding_box.referenceSlug
JOIN location ON map_entity.slug = location.referenceSlug
LEFT JOIN localized_string ON map_entity.descriptionKey = localized_string.key AND localized_string.locale = "de"
WHERE slug = :slug;

getGeoDataBySlugs:
SELECT map_entity.slug, bounding_box.*, location.*
FROM map_entity
JOIN bounding_box ON map_entity.slug = bounding_box.referenceSlug
JOIN location ON map_entity.slug = location.referenceSlug
WHERE slug IN :slugs;

searchByAlias:
SELECT map_entity.slug, alias.string AS alias FROM map_entity
JOIN alias ON map_entity.slug = alias.referenceSlug
AND alias.locale = "de"
AND alias.string LIKE ( '%' || :name || '%') AND isSearchable = 1;

getBySubTypes:
SELECT slug, sub_type FROM map_entity WHERE sub_type IN :subTypes AND isSearchable = 1;