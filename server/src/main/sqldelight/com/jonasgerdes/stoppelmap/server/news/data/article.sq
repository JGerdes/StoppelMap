import kotlin.Boolean;
import kotlinx.datetime.Instant;
import kotlinx.datetime.LocalDate;

CREATE TABLE article (
    slug        TEXT NOT NULL PRIMARY KEY,
    title       TEXT NOT NULL,
    description TEXT NOT NULL,
    publishedOn TEXT AS LocalDate NOT NULL,
    content     TEXT NOT NULL,
    isVisible   INTEGER AS Boolean NOT NULL,
    sortKey     TEXT NOT NULL,
    createdAt   TEXT AS Instant NOT NULL,
    modifiedAt  TEXT AS Instant NOT NULL
);

CREATE UNIQUE INDEX sortIndex ON article(sortKey);

upsert {
    INSERT OR IGNORE INTO article(slug, title, description, publishedOn, content, isVisible, sortKey, createdAt, modifiedAt)
    VALUES (:slug, :title, :description, :publishedOn, :content, :isVisible, :sortKey, :createdAt, :modifiedAt);
    UPDATE article
    SET
        title = :title,
        description = :description,
        publishedOn = :publishedOn,
        content = :content,
        isVisible = :isVisible,
        modifiedAt = :modifiedAt
    WHERE slug = :slug;
}

getVisible:
    SELECT * FROM article WHERE isVisible = 1 ORDER BY sortKey DESC LIMIT :limit;

getVisibleBefore:
    SELECT * FROM article WHERE isVisible = 1 AND sortKey < :before ORDER BY sortKey DESC LIMIT :limit;

countExistingPublishDates:
    SELECT publishedOn, COUNT(*) FROM article GROUP BY publishedOn;

countVisible:
    SELECT COUNT(slug) FROM article WHERE isVisible = 1;

countAll:
    SELECT COUNT(slug) FROM article;